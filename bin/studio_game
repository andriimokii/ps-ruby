#!/usr/bin/env ruby

require_relative '../lib/studio_game/player'
require_relative '../lib/studio_game/game'
require_relative '../lib/studio_game/clumsy_player'
require_relative '../lib/studio_game/berserk_player'

# greeting = "Welcome!"

# 3.times do
#     puts greeting.upcase
# end

# puts Time.new

# name1 = "larry"
# health1 = 60
# puts "#{ name1 }\t health \n is #{ health1 / 9.0 }"

# name2 = "curly"
# name3 = "moe"

# puts "Players:\n\t#{ name1 }\n\t#{ name2 }\n\t#{ name3 }"

# project1 = "ABC"
# project2 = "LMN"
# project3 = "XYZ"

# puts "Project #{ project1 } has $1000 in funding."
# puts "Projects: \n\t#{ project1 }\n\t#{ project2 }\n\t#{ project3 }"

# name1 = "larry"
# health1 = 60
# puts "#{ name1.capitalize } has a health of #{ health1 }"

# name2 = "curly"
# health2 = 125
# puts "#{ name2.upcase } has a health of #{ health2 }"

# health2 = health1
# puts "#{ name2.upcase } has a health of #{ health2 }"

# health1 = 30
# puts "#{ name1.capitalize } has a health of #{ health1 }"
# puts "#{ name2.upcase } has a health of #{ health2 }"

# name3 = "moe"
# health3 = 100
# puts "#{ name3.capitalize } has a health of #{ health3 }".center(50, '*')

# name4 = "shemp"
# health4 = 90
# puts "#{ name4.capitalize.ljust(30, '.') } #{ health4 } health"

# puts "Game started on #{Time.new.strftime("%A %d/%m/%Y at %I:%M%p")}"

# puts self.class

# def movie_listing(title, rank=title.length)
#     "Movie: #{title.capitalize} has a rank of #{ rank }"
# end

# puts movie_listing("goonies")
# puts movie_listing("ghostbuster", 9)
# def time
#     Time.new.strftime("%T")
# end

# def say_hello(name, health=100)
#     "I'm #{name.capitalize} with a health of #{health} as of #{time}."
# end

# puts say_hello("larry", 60)
# puts say_hello("curly", 125)
# puts say_hello("moe")
# puts say_hello("shemp", 90)


# player1 = Player.new("moe")
# puts player1.health
# puts player1.name
# puts player1

# player2 = Player.new("larry", 60)
# player2.name = "Lawrence"
# puts player2

# player3 = Player.new("curly", 125)
# player3.blam
# puts player3
# player3.w00t
# puts player3

# puts player3

# players = [player1, player2, player3]
# puts "There are #{players.size} players in a game:"

# players.pop
# players.push(Player.new("Shemp", 90))
# players.each do |player|
#     player.blam
#     player.w00t
#     player.w00t
#     puts player
# end

# player1 = Player.new("moe")
# player2 = Player.new("larry", 60)
# player3 = Player.new("curly", 125)
# player4 = Player.new("andrii", 135)

knuckleheads = StudioGame::Game.new("Knuckleheads")
default_player_file = File.join(File.dirname(__FILE__), 'players.csv')
knuckleheads.load_players(ARGV.shift || default_player_file)

# knuckleheads.load_players('players.csv')
knuckleheads.add_player(StudioGame::ClumsyPlayer.new("klutz", 105))
knuckleheads.add_player(StudioGame::ClumsyPlayer.new("klutz-powered", 90, 5))
knuckleheads.add_player(StudioGame::BerserkPlayer.new("berserker", 50))
# knuckleheads.add_player(player2)BerserkPlayer
# knuckleheads.add_player(player3)
# knuckleheads.add_player(player4)

loop do
    puts "\nHow many game rounds? ('quit' to exit)"
    answer = gets.chomp.downcase
    case answer 
    when /^\d+/
        knuckleheads.play(answer.to_i) do
            knuckleheads.total_points >= 2000
        end
    when "quit", "exit"
        knuckleheads.print_stats
        break
    else
        puts "Please enter a number or 'quit'"
    end
end

knuckleheads.save_high_scores
